using Content.Client.Movement.Systems;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Shared.Enums;
using Robust.Shared.Prototypes;
using Content.Shared.Eye.Blinding;
using Content.Shared.Eye.Blinding.Components;
using Content.Shared.Movement.Components;
using Content.Shared.Movement.Systems;
using Content.Shared._Starlight.CloudEmote;

namespace Content.Client._Starlight.CloudEmotes
{
    public sealed class CloudEmoteOverlay : Overlay
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        [Dependency] private readonly IPlayerManager _playerManager = default!;
        [Dependency] private readonly IEntityManager _entityManager = default!;
        [Dependency] private readonly ILightManager _lightManager = default!;
        private SharedTransformSystem? _xformSystem = null;

        private ISawmill _sawmill = default!;
        public CloudEmoteOverlay()
        {
            IoCManager.InjectDependencies(this);
            _sawmill = Logger.GetSawmill("cloud_emotes");
        }
        protected override bool BeforeDraw(in OverlayDrawArgs args)
        {
            if (_xformSystem is null && !_entityManager.TrySystem(out _xformSystem))
                return false;
            return true;
        }

        protected override void Draw(in OverlayDrawArgs args)
        {
            var query = _entityManager.EntityQueryEnumerator<CloudEmoteActiveComponent>();
        while (query.MoveNext(out var uid, out var comp))
        {
            update_position(uid, comp.Emote); 
        }
        }

        private void update_position(EntityUid player, EntityUid emote)
        {
            if (_xformSystem == null)
            {
                _sawmill.Error("xform null");
                return;
            }
            var position = _xformSystem.GetWorldPosition(player);
            _xformSystem.SetWorldPosition(emote, position);
        }        
    }
}
